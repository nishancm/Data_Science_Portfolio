breweries = breweries[breweries != breweries[ind2]]
}
}
return(direction)
}
routeplanner(mat)
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to at least 4 bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
# this for loop convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
print(breweries)
breweries = breweries[breweries != c(1,n)]
print(breweries)
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[breweries != breweries[ind1]]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[breweries != breweries[ind2]]
}
}
return(direction)
}
routeplanner(mat)
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to at least 4 bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
# this for loop convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
print(breweries)
print(n)
breweries = breweries[breweries != c(1,n)]
print(breweries)
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[breweries != breweries[ind1]]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[breweries != breweries[ind2]]
}
}
return(direction)
}
routeplanner(mat)
c(1,2,9,3,4,5) != c(1,9)
c(1,2,9,3,4,5) %in% c(1,9)
c(1,2,9,3,4,5) !%in% c(1,9)
c(1,2,9,3,4,5) ~%in% c(1,9)
!(c(1,2,9,3,4,5) %in% c(1,9))
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to at least 4 bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
# this for loop convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
print(breweries)
print(n)
breweries = breweries[breweries != c(1,n)]
print(breweries)
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[!(breweries %in% breweries[ind1])]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[!(breweries %in% breweries[ind2])]
}
}
return(direction)
}
routeplanner(mat)
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to at least 4 bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
# this for loop convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
print(breweries)
print(n)
breweries = breweries[breweries != c(1,n)]
print(breweries)
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[!(breweries %in% breweries[ind1])]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[!(breweries %in% breweries[ind2])]
}
}
return(direction)
}
routeplanner(mat)
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to at least 4 bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
# this for loop convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
print(breweries)
print(n)
breweries = breweries[!(breweries %in% c(1,n))]
print(breweries)
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[breweries != breweries[ind1]]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[breweries != breweries[ind2]]
}
}
return(direction)
}
routeplanner(mat)
mat <- matrix(c(0,1,3,4,6,8,10,13,999,
1,0,2,2,4,7,9,9,11,
3,2,0,3,2,3,5,6,8,
4,2,3,0,3,7,7,7,10,
6,4,2,3,0,5,5,4,7,
8,7,3,7,5,0,3,7,5,
10,9,5,7,5,3,0,4,2,
13,9,6,7,4,7,4,0,6,
999,11,8,10,7,5,2,6,0), 9)
routeplanner(mat)
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to at least 4 bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
# this for loop convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
breweries = breweries[!(breweries %in% c(1,n))]
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[breweries != breweries[ind1]]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[breweries != breweries[ind2]]
}
}
return(direction)
}
routeplanner <- function(dist_mat) {
# function is used to identify the optimum path for bar hopping primarlity focusing
# on shortest path to bars. This method will result in at least 4 bars to go bar hopping.
####### input parameters
# dist_mat - this is a matrix giving distance between each bar from the filtered list,starting point, and stopping point
# e.g. in the following 9*9 distnace matrix, first row represent starting point and last row represent stopping point
#    matrix(c(0,1,3,4,6,8,10,13,5,
#             1,0,2,2,4,7,9,9,11,
#             3,2,0,3,2,3,5,6,8,
#             4,2,3,0,3,7,7,7,10,
#             6,4,2,3,0,5,5,4,7,
#             8,7,3,7,5,0,3,7,5,
#             10,9,5,7,5,3,0,4,2,
#             13,9,6,7,4,7,4,0,6,
#             5,11,8,10,7,5,2,6,0), 9)
###### output parameteres
# row_ids - rownumbers (which correspond to breweries) from the dist_mat in order to be visited
n <- nrow(dist_mat)
dist_mat[1,n] <- 9999 # make sure start and end does not get connected directly
dist_mat[n,1] <- 9999 # make sure start and end does not get connected directly
dist_mat_copy <- dist_mat
breweries <- list()
k = 2
# generating shortest path multiple time to get at least 4 unique bars
while(length(unlist(breweries)) < 6) {
g <- graph.adjacency(dist_mat, weighted=TRUE)
s.paths <- shortest_paths(g, from = c(1,n), output = 'epath') #generate shortest paths
ind <- length(s.paths$epath)
req_path <- s.paths$epath[[ind]] #grab shprtest path of interest
points <- as_ids(req_path) # only gives some wierd indices
bar_id <- list(1)
#convert indices provided from shortest path algo into row numbers corresponding breweries
for(i in 1:length(points)) {
bar_id[i+1] <- (bar_id[[i]][1]+points[i])%%n
}
bar_id[[length(points)+1]] <- n
bar_id <- unlist(bar_id)
breweries[k] <- list(bar_id)
breweries <- list(unique(unlist(breweries)))
dist_mat[bar_id[2], bar_id[3]] <- 9999 # to make sure previous path is not selected again
dist_mat[bar_id[3], bar_id[2]] <- 9999 # to make sure previous path is not selected again
}
breweries = unlist(breweries)
breweries = breweries[!(breweries %in% c(1,n))]
direction <- rep(0,length(breweries))
# create the order to be followed when visiting brewery
for(j in 1:ceiling(length(breweries)/2)) {
ind1 <- which.min(dist_mat_copy[,breweries, drop = F][1,]) # finding bar at minimum distance from the starting end
direction[j] <- breweries[ind1]
breweries = breweries[breweries != breweries[ind1]]
if(sum(breweries) != 0) {
ind2 <- which.min(dist_mat_copy[,breweries, drop = F][n,]) # finding bar at minimum distance from the stopping end
direction[length(direction)+1-j] <- breweries[ind2]
breweries = breweries[breweries != breweries[ind2]]
}
}
return(direction)
}
routeplanner(mat)
mat <- matrix(c(0,1,3,4,6,8,10,13,999,
1,0,2,2,4,7,9,9,1,
3,2,0,3,2,3,5,6,3,
4,2,3,0,3,7,7,7,4,
6,4,2,3,0,5,5,4,6,
8,7,3,7,5,0,3,7,8,
10,9,5,7,5,3,0,4,10,
13,9,6,7,4,7,4,0,13,
999,1,3,4,6,8,10,13,0), 9)
routeplanner(mat)
19.99+4.06
knitr::opts_chunk$set(echo = TRUE)
# loading the required librarys
library(magrittr)
library(dplyr)
library(ggplot2)
library(knitr)
#Getting the CSV files except 2017 data as it is not completed
flights <- data.frame(NULL)
for(i in 1990:2016) {
file <- paste0("657240010_T_T100D_MARKET_US_CARRIER_ONLY_",i,"_All.csv")
flights <- rbind(flights, read.csv(paste0("q3_data/",file)) )
}
str(flights)
cols <- c("YEAR", "PASSENGERS", "FREIGHT", "MAIL", "CARRIER_GROUP_NEW", "UNIQUE_CARRIER_NAME")
flights2 <- flights[cols]
cols <- c("YEAR", "MONTH", "PASSENGERS", "FREIGHT", "MAIL", "CARRIER_GROUP_NEW", "UNIQUE_CARRIER_NAME")
flights2 <- flights[cols]
# data frame of national and major carriers
natMajflights <- flights2 %>% select(YEAR, MONTH, UNIQUE_CARRIER_NAME,
CARRIER_GROUP_NEW) %>%
filter(CARRIER_GROUP_NEW == 2 | CARRIER_GROUP_NEW == 3, MONTH == 1)
head(flights2)
install.packages(c("ade4", "chron", "CORElearn", "digest", "dotCall64", "DRR", "ellipse", "git2r", "hexbin", "Hmisc", "irlba", "lava", "mgcv", "microbenchmark", "pillar", "RCurl", "recipes", "rgl", "RGtk2", "rpart", "sp", "tibble", "viridis", "zoo"))
install.packages(c("RGtk2", "tibble"))
update.packages(knitr)
update.packages("knitr")
library(knitr)
R version
version
0.14*198
0.14*0.198
0.151*0.224
0.151*0.224/4
0.24*0.52
0.524*0.52
4020+16105+2680+16105
knitr::opts_chunk$set(echo = TRUE)
trfic_stps <- read.csv("Officer_Traffic_Stops.csv")
head(trfic_stps)
trfic_stps <- trfic_stps[, !names(trfic_stps) %in%
c("ObjectID", "CreationDate", "Creator", "EditDate",
"Editor")]
(33.3+53.97+5)/3
(33.3+53.97+5)/3 + 1050
-log(0.3)
log(0.3)+log(0.7)
-(log(0.3)+log(0.7))
-log(0.7)
3+5+1000/3
3+4+1000/3
(3+5+1000)/3
336-3+336-5+1000-336
2+0+1000-5
setwd("~/Documents/Data Science Portfolio/Data_story_telling/Traffic_stops")
