xy <- data.frame(x=x,y=y)
xy
xyz <-xy
xyz
is.na(xyz) <- xyz=""
is.na(xyz) <- xyz==""
xyz
is.na(xy)
xy == ""
titanicData <- read.csv("~/Desktop/titanic.csv")
is.na(titanicData) <- titanicData==""
str(titanicData)
titanicData$Cabin[1:20]
titanicData$Cabin[1:13]
titanicData <- read.csv("~/Desktop/titanic.csv")
titanicData <- read.csv("~/Desktop/titanic.csv")
str(titanicData)
titanicData$Cabin[1:10]
for(i in 1:ncol(titanicData)){
for(j in 1:nrow(titanicData)) {
if(titanicData[i,j]==""){
titanicData[i,j] <- NA
}
}
}
x <- titanicData$Cabin[1:10]x
x <- titanicData$Cabin[1:10]
x
if(x[3]==""){print(wewe)}
if(x[3]==""){print("wewe")}
titanicData$Cabin[1:10]
sapply(titanicData,function(x) sum(is.null(x) ) )
for(i in 1:ncol(titanicData)){
for(j in 1:nrow(titanicData)) {
if(titanicData[i,j]==""){
titanicData[i,j] <- NA
}
}
}
for(i in 1:ncol(titanicData)){
for(j in 1:nrow(titanicData)) {
if(titanicData[i,j]==""){
titanicData[i,j] <- NA
}
}
}
for(i in 1:ncol(titanicData)){
for(j in 1:nrow(titanicData)) {
if(!is.na(titanicData[i,j]) & titanicData[i,j]==""){
titanicData[i,j] <- NA
}
}
}
for(i in 1:ncol(titanicData)){
print(i)
for(j in 1:nrow(titanicData)) {
if(!is.na(titanicData[i,j]) & titanicData[i,j]==""){
titanicData[i,j] <- NA
}
}
}
titanicData <- read.csv("~/Desktop/titanic.csv")
titanicData$Cabin[1:20]
head(titanicData)
for(i in 1:ncol(titanicData)){
print(i)
for(j in 1:nrow(titanicData)) {
if(!is.na(titanicData[j,i]) & titanicData[i,j]==""){
titanicData[i,j] <- NA
}
}
}
titanicData <- read.csv("~/Desktop/titanic.csv")
for(i in 1:ncol(titanicData)){
print(i)
for(j in 1:nrow(titanicData)) {
if(!is.na(titanicData[j,i]) & titanicData[j,i]==""){
titanicData[j,i] <- NA
}
}
}
# Quick work around will be is.na(titanicData) <- titanicData==""
titanicData$Cabin[1:20]
round(sum(is.na(titanicData$Age)) * 100 / nrow(titanicData$Age), 2)
sum(is.na(titanicData$Age))
nrow(titanicData$Age)
round(sum(is.na(titanicData$Age)) * 100 / nrow(titanicData), 2)
titanicData$Age[1:50]
is.na(titanicData) <- mean(titanicData$Age)
is.na(titanicData$Age) <- mean(titanicData$Age, na.rm = T)
titanicData$Age[1:50]
mean(titanicData$Age, na.rm = T) <- is.na(titanicData$Age)
titanicData[is.na(titanicData$Age), ] <- mean(titanicData$Age, na.rm = T)
titanicData$Age[1:50]
titanicData <- read.csv("~/Desktop/titanic.csv")
titanicData[is.na(titanicData$Age), ] <- mean(titanicData$Age, na.rm = T)
titanicData <- read.csv("~/Desktop/titanic.csv")
titanicData$Age[1:50]
titanicData[is.na(titanicData$Age), ]$Age <- mean(titanicData$Age, na.rm = T)
titanicData$Age[1:50]
str(titanicData)
qq <- data.frame()
qq[1,1] <- 4
qq
qq[2,2] <-9
qq
sampSize <- c(100,1000,10000,100000,1000000)
uni_vec <- list()
for(i in sampSize) {
uni_100 <- runif(i,-1,1)
mean(uni_100)
var(uni_100)
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- list()
unif_mean <- c()
unif_var <- c()
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- runif(sampSize[1],-1,1)
unif_mean[i] <- mean(uni_vec[i])
unif_var[i] <- var(uni_vec[i])
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- list()
unif_mean <- c()
unif_var <- c()
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- runif(sampSize[1],-1,1)
#unif_mean[i] <- mean(uni_vec[i])
#unif_var[i] <- var(uni_vec[i])
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- c()
unif_mean <- c()
unif_var <- c()
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- runif(sampSize[1],-1,1)
#unif_mean[i] <- mean(uni_vec[i])
#unif_var[i] <- var(uni_vec[i])
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- c()
unif_mean <- c()
unif_var <- c()
# Generating uniform random variables
for(i in 1:length(sampSize)) {
#uni_vec[i] <- runif(sampSize[1],-1,1)
#unif_mean[i] <- mean(uni_vec[i])
#unif_var[i] <- var(uni_vec[i])
}
lst <- {}
lst <- {}
for(i in 1:5) {
lst[i] <-i
}
lst
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- runif(sampSize[1],-1,1)
unif_mean[i] <- mean(uni_vec[i])
unif_var[i] <- var(uni_vec[i])
}
lst <- {}
for(i in 1:5) {
lst[i] <- runif(i*100)
}
lst <- list()
for(i in 1:5) {
lst[i] <- runif(i*100)
}
lst[1]
lst[[1]][1]
lst
lst <- list()
for(i in 1:5) {
lst[i] <- c(runif(i*100))
}
c(runif(i*20))
lst <- list()
for(i in 1:5) {
lst[i] <- list(runif(i*100))
}
lst <- {}
for(i in 1:5) {
lst[i] <- list(runif(i*10))
}
lst
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[1],-1,1) )
unif_mean[i] <- mean(uni_vec[i])
unif_var[i] <- var(uni_vec[i])
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[1],-1,1) )
#unif_mean[i] <- mean(uni_vec[i])
#unif_var[i] <- var(uni_vec[i])
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[1],-1,1) )
#unif_mean[i] <- mean(uni_vec[i])
#unif_var[i] <- var(uni_vec[i])
}
str(uni_vec)
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[i],-1,1) )
#unif_mean[i] <- mean(uni_vec[i])
#unif_var[i] <- var(uni_vec[i])
}
str(uni_vec)
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[i],-1,1) )
unif_mean[i] <- mean(uni_vec[i])
unif_var[i] <- var(uni_vec[i])
}
str(uni_vec)
head(uni_vec[[1]])
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[i],-1,1) )
unif_mean[i] <- mean(uni_vec[[i]])
unif_var[i] <- var(uni_vec[[i]])
}
sampSize <- c(100,1000,10000,100000,1000000)
unif_vec <- {}
unif_mean <- {}
unif_var <- {}
# Generating uniform random variables
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[i],-1,1) )
unif_mean[i] <- mean(uni_vec[[i]])
unif_var[i] <- var(uni_vec[[i]])
}
# Creating data frame with uniform random variables
unifDataFrame <- data.frame()
names(unifDataFrame) <- c("sampleSize", "theoreticalMean", "sampleMean", "deltaMean",
"theoreticalVariance", "sampleVariance","deltaVariance")
# Creating data frame with uniform random variables
unifDataFrame <- data.frame()
unifDFColnames <- c("sampleSize", "theoreticalMean", "sampleMean", "deltaMean",
"theoreticalVariance", "sampleVariance","deltaVariance")
for(i in 1:length(sampSize) ) {
unifDataFrame[i,1] <- sampSize[i]
unifDataFrame[i,2] <- (-1+1)/2
unifDataFrame[i,3] <- unif_mean[i]
unifDataFrame[i,4] <- unifDataFrame[i,3]-unifDataFrame[i,2]
unifDataFrame[i,5] <- ((-1-1)^2)/12
unifDataFrame[i,6] <- unif_var[i]
unifDataFrame[i,7] <- unifDataFrame[i,6]-unifDataFrame[i,5]
}
#for(i in )
unifDataFrame
# Creating data frame with uniform random variables
unifDataFrame <- data.frame()
unifDFColnames <- c("sampleSize", "theoreticalMean", "sampleMean", "deltaMean",
"theoreticalVariance", "sampleVariance","deltaVariance")
for(i in 1:length(sampSize) ) {
unifDataFrame[i,1] <- sampSize[i]
unifDataFrame[i,2] <- (-1+1)/2
unifDataFrame[i,3] <- unif_mean[i]
unifDataFrame[i,4] <- unifDataFrame[i,3]-unifDataFrame[i,2]
unifDataFrame[i,5] <- ((-1-1)^2)/12
unifDataFrame[i,6] <- unif_var[i]
unifDataFrame[i,7] <- unifDataFrame[i,6]-unifDataFrame[i,5]
}
# Setting column names
colnames(unifDataFrame) <- unifDFColnames
unifDataFrame
unifDataFrame(sampSize)
unifDataFrame(sampSize,)
unifDataFrame("sampSize')
)
asa
unifDataFrame("sampSize")
unifDataFrame("sampSize",)
unifDataFrame(,"sampSize")
unifDataFrame(,sampSize)
unifDataFrame[sampSize]
unifDataFrame[,sampSize]
unifDataFrame[,"sampSize"]
unifDataFrame[["sampleSize"]]
unifDataFrame[[sampleSize]]
unifDataFrame[[c("sampleSize","theoreticalMean")]]
unifDataFrame[["sampleSize"]]
for(i in 1:length(sampSize)) {
uni_vec[i] <- list(runif(sampSize[i],-1,1) )
unif_mean[i] <- mean(uni_vec[[i]])
unif_var[i] <- var(uni_vec[[i]])
}
# creating 10,000,000 random variables
myRunifVec <- runif(10000000,min = 0,max = 1)
# histograms of 6 random selected samples
par(mfrow = c(2,2))
for(i in 1:4) {
hist(sample(myRunifVec,10000))
}
# creating 10,000,000 random variables
myRunifVec <- runif(10000000,min = 0,max = 1)
# histograms of 6 random selected samples
par(mfrow = c(2,2))
for(i in 1:4) {
hist(sample(myRunifVec,10000), xlab = paste0("sample ",i), main = paste0("Histogram ",i))
}
# creating column 1 and 2 with uniform random variables
myRunifDataFrame <- data.frame(col1 = runif(10000000), col2 = runif(10000000))
dplyr::mutate(myRunifDataFrame, runifSum = col1+col2)
head
head(myRunifDataFrame)
head(myRunifDataFrame)
xx <- data.frame(col1 = runif(10), col2 = runif(10))
library(dplyr)
mutate(xx, col3 = col+col2)
mutate(xx, col3 = col+col2)
mutate(.data = xx, col3 = col+col2)
mutate(xx, col+col2)
xx
xx %>% mutate(col+col2)
xx %>% mutate(col3= col+col2)
str(xx)
xx %>% mutate(col3= col+col2)
# creating column 1 and 2 with uniform random variables
myRunifDataFrame <- data.frame(col1 = runif(10000000), col2 = runif(10000000))
dplyr::mutate(myRunifDataFrame, runifSum = col1+col2)
library(dplyr)
xx %>% mutate(col3= col+col2)
xx
str(xx)
xx$col1+xx$col2
xx %>% mutate(col3 <- col+col2)
xx %>% mutate(col3 = col1+col2)
xx
# creating column 1 and 2 with uniform random variables
myRunifDataFrame <- data.frame(col1 = runif(10000000), col2 = runif(10000000))
myRunifDataFrame <- dplyr::mutate(myRunifDataFrame, runifSum = col1+col2)
head
head(myRunifDataFrame)
# creating column 1 and 2 with exponential random variables
myRexpDataFrame <- data.frame(col1 = rexp(10000000), col2 = rexp(10000000))
myRexpDataFrameExp <- dplyr::mutate(myRexpDataFrame, rexpSum = col1+col2)
#Histogram of `runifSum`
hist(myRexpDataFrame$rexpSum, xlab = "rexpSum", main = "Histogram")
# creating column 1 and 2 with exponential random variables
myRexpDataFrame <- data.frame(col1 = rexp(10000000), col2 = rexp(10000000))
myRexpDataFrame <- dplyr::mutate(myRexpDataFrame, rexpSum = col1+col2)
#Histogram of `runifSum`
hist(myRexpDataFrame$rexpSum, xlab = "rexpSum", main = "Histogram")
# code provided in the question
set.seed(100)
x_1 <- runif(100000, -100, 100)
y_1 <- rexp(100000, rate = 0.5)
# Claculatng b1
b1 <- sum((x_1 - mean(x_1)) * (y_1 - mean(y_1)) ) / sum((x_1 - mean(x_1))^2)
# Calculating b0
b0 <- (sum(y_1) - b1*sum(x_1)) / length(x_1)
#calculating SSE
fitY_1 <- b0 + b1 * x_1
SSE1 <- sum((y_1 - fitY_1)^2 )
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = b0_1, b = b1_1)
# Claculatng b1
b1_1 <- sum((x_1 - mean(x_1)) * (y_1 - mean(y_1)) ) / sum((x_1 - mean(x_1))^2)
# Calculating b0
b0_1 <- (sum(y_1) - b1*sum(x_1)) / length(x_1)
# code provided in the question
set.seed(100)
x_1 <- runif(100000, -100, 100)
y_1 <- rexp(100000, rate = 0.5)
#calculating SSE, sum of squared errors
fitY_1 <- b0_1 + b1_1 * x_1
SSE1 <- sum((y_1 - fitY_1)^2 )
#calculating SSR, regression sum of squares
SSR1 <- sum((fitY_1 - mean(y_1))^2 )
#calculating SSTO, total sum squares
SSTO1 <- sum((y_1 - mean(y_1))^2)
#calculating coefficient of determination
Rsqrd1 <- SSR1 / SSTO1
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = b0_1, b = b1_1)
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = b0_1, b= b1_1,col = "red")
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 5, b= b1_1,col = "red")
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 5, b= 0.2,col = "red")
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 5, b= 0.2,col = "red")
# code provided in the question
set.seed(100)
x_1 <- runif(100000, -100, 100)
y_1 <- rexp(100000, rate = 0.5)
# Claculatng b1
b1_1 <- sum((x_1 - mean(x_1)) * (y_1 - mean(y_1)) ) / sum((x_1 - mean(x_1))^2)
# Calculating b0
b0_1 <- (sum(y_1) - b1_1*sum(x_1)) / length(x_1)
#calculating SSE, sum of squared errors
fitY_1 <- b0_1 + b1_1 * x_1
SSE1 <- sum((y_1 - fitY_1)^2 )
#calculating SSR, regression sum of squares
SSR1 <- sum((fitY_1 - mean(y_1))^2 )
#calculating SSTO, total sum squares
SSTO1 <- sum((y_1 - mean(y_1))^2)
#calculating coefficient of determination
Rsqrd1 <- SSR1 / SSTO1
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 5, b= 0.25,col = "red")
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 10, b= 0.25,col = "red")
?abline
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 10, b= -0.25,col = "red")
plot(x = 1:10, y = (1:10)^2)
abline(a=20,b=3)
abline(a=20,b=8)
abline(a=10,b=8)
abline(a=40,b=8)
abline(a=-10,b=8)
abline(a=0,b=8)
abline(a=80,b=0.1)
abline(a=80,b=10)
abline(a=-80,b=10)
abline(a=80,b=-10)
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 10, b= -0.25,col = "red")
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = 10, b= -0.25,col = "red")
plot(x = 1:10, y = (1:10)^2)
abline(a=80,b=-10)
abline(a=20,b=-10)
abline(a=20,b=10)
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = b0_1, b= b1_1,col = "red")
# scatter plot of y_1 on x_1
plot(x = x_1,y = y_1)
# regression line
abline(a = b0_1, b= b1_1,col = "red")
# residual plot
plot(x = x_1, e_1)
# residuals for the fitted values
e_1 <- y_1 - fitY_1
# residual plot
plot(x = x_1, e_1)
# horizontal line at e=0
abline(h=0, col = "red")
setwd("~/Dropbox/MSAN/SummerI/EDA/HW2")
?reshape
knitr::opts_chunk$set(echo = TRUE)
# getting the json data flattened
friends <- jsonlite::fromJSON("~/Desktop/hw2.json",flatten = T)
# unnest lists childs
friends <- tidyr::unnest(friends)
# remove duplicate rows
friends <- dplyr::distinct(friends)
head(friends)
